#!/usr/bin/env bash

set -e

GETOPT_SPEC="\
  $(basename "$0") <options> <views>

See '$(basename "$0") --help' for more help.

views: List the views to use. /regex/ or list-name. See '-l'.

Options:
--
h           Show the command summary
help        Browse the complete '$(basename "$0")' documentation
 
l,list      List the available views
g,grid      Attempt to display views in a grid layout
f,file=     Use a YAML file as starting input
t,testml=   Use a \$YAML_TEST_SUITE case as YAML input
c,compile   Compile yaml-editor before starting it
local       Use local sources for dynamic languages
 
x,debug     Debug - Turn on Bash trace (set -x) output
"

: ${YAML_EDITOR_ROOT:=$(cd $(dirname $BASH_SOURCE)/..; pwd)}

all_views=($(cut -d, -f1 $YAML_EDITOR_ROOT/share/emitters.csv \
    | grep -v ^id | perl -ple's/\-(\w+)$/.$1/' | sort))

export PATH="${YAML_EDITOR_ROOT:?}/lib:$PATH"
source "$YAML_EDITOR_ROOT/lib/bash+.bash"
bash+:import :std can
use GetOpt
DOCKER_USER="${DOCKER_USER:-yamlio}"

if [[ -z $YAML_TEST_SUITE ]]; then
  if [[ -d ../yaml-test-suite ]]; then
    export YAML_TEST_SUITE="$(dirname $PWD)/yaml-test-suite"
  elif [[ -f ./test/229Q.tml ]]; then
    export YAML_TEST_SUITE=$PWD
  fi
fi

main() {
  input_file=input.yaml
  if [[ $(uname) == Darwin ]]; then
    uid=$(/usr/bin/stat -f%u $0)
    gid=$(/usr/bin/stat -f%g $0)
  else
    uid=$(stat -c%u $0)
    gid=$(stat -c%g $0)
  fi

  get-options "$@"

  if $option_list; then
    list-all
  elif [[ ! -e /.dockerenv ]]; then
    docker-run "$@"
  elif [[ $command == RUN ]]; then
    "run-all"
  elif [[ $command == TESTML ]]; then
    "show-tml"
  elif [[ $command == SAVE ]]; then
    "save-tml"
  else
    "editor-start"
  fi
}

list-all() {
  cat "$YAML_EDITOR_ROOT/share/emitters.table"
}

docker-run() {
  if $option_compile; then
    (
      cd $YAML_EDITOR_ROOT
      make
    )
  fi

  work=$(mktemp -d /tmp/yaml-editor-XXXXXXXXXXXXXXXX)
  root=$(cd "$(dirname "$0")/.."; pwd)
  local_source="-v $(cd "$root/.."; pwd):/local_source"
  $option_local || local_source=''

  if [[ -n $option_file ]]; then
    [[ -f $option_file ]] ||
      die "Input file does not exist '$option_file'"
    cp $option_file $work/$input_file
  else
    cat <<'...' > $work/$input_file
foo: bar

# Press space to render.
# Press \h for help (more commands).
# Press \c to clear the input.
# Press \Q to quit.
...
  fi

  mount_suite=''
  if [[ -n $YAML_TEST_SUITE ]]; then
    [[ -e $YAML_TEST_SUITE/test/229Q.tml ]] ||
      die "YAML_TEST_SUITE='$YAML_TEST_SUITE' seems to be invalid"
    mount_suite="-v $YAML_TEST_SUITE/test:/suite"
  fi

  docker run --rm -it \
    -v "$work":/yaml/edit \
    -v "$root":/yaml-editor \
    $mount_suite \
    $local_source \
    $DOCKER_USER/yaml-editor \
    yaml-editor "$@"

  echo "Files saved in '$work'"
}

editor-start() {
  get-views
  get-yaml

  cp /yaml-editor/share/vimrc .vimrc
  cp /yaml-editor/share/help help

  for view in "${views[@]}"; do
    touch $view
  done

  chown -R "$uid.$gid" .

  if [[ -e /local_source ]]; then
    set-local-sources
  fi

  sleep .2
  if $default_views; then
    vim -c 'source .vimrc' -c "sbuffer ." $input_file . -O
  else
    vims $input_file ${views[@]} -- \
      -c 'source .vimrc' -c 'sbuffer input.yaml' -c 'wincmd H'
  fi
}

set-local-sources() {
  perls=(
    yaml-pm
    yaml-libyaml-pm
    yaml-pegex-pm
    YAML-Syck
    YAML-Tiny
    YAML-PP-p5
  )
  for perl in "${perls[@]}"; do
    if [[ -e /local_source/$perl ]]; then
      export PERL5LIB=$(
        IFS=:; set -- /local_source/$perl/lib $PERL5LIB; echo "$*"
      )
    fi
  done
}

get-yaml() {
  [[ -n $option_testml ]] || return 0

  [[ $option_testml =~ ^[A-Z0-9]{4}$ ]] ||
    die "Invalid TestML id '$option_testml'"
  if [[ -d /suite ]]; then
    suite=/suite
  elif [[ -n $YAML_TEST_SUITE ]]; then
    suite=$YAML_TEST_SUITE/test
  else
    die "Can't use --testml without YAML_TEST_SUITE variable"
  fi
  [[ -f $suite/229Q.tml ]] ||
    die "Invalid YAML_TEST_SUITE specified"
  testml="$suite/$option_testml.tml"
  [[ -f $testml ]] ||
    die "No test file '$testml' found"
  yaml=$(
    cat $testml | perl -p0 \
      -e 's/.*\n\+\+\+\ +in-yaml\n//s;' \
      -e 's/^\+\+\+.*//ms;' \
      -e 's/^\\//mg;'
  )
  echo "$yaml" > $input_file
}

run-all() {
  for view in *.*; do
    if [[ $view =~ ^input\.yaml$ || $view =~ \.tml$ ]]; then
      continue
    fi
    filter="${view/\./-}"
    if [[ $view =~ \.json$ ]]; then
      output="$(cat $input_file | reformat | $filter 2>&1 || true)"
      re='^[\{\[]'
      if [[ $output =~ $re ]]; then
        echo "$output" | jq . > $view 2>&1
      else
        # something went wrong (or it's just a scalar)
        echo "$output" > $view
      fi
    else
      cat $input_file | reformat | $filter > $view 2>&1 || true
    fi
  done
}

save-tml() {
  local dir=
  [[ -e /suite ]] && dir=/suite || dir=.
  while true; do
    id="$(
      cat /dev/urandom |
      LC_ALL=C tr -cd A-HJ-NP-Z2-9 |
      fold -w4 |
      grep [A-Z] |
      grep [0-9] |
      head -n1
    )"
    file="$dir/$id.tml"
    [[ -e "$file" ]] || break
  done

  make-tml
  echo "$tml" > "$file"
  chown "$uid.$gid" "$file"
  echo $file
}

show-tml() {
  make-tml
  echo "$tml" > TEST.tml
  echo TEST.tml
}

make-tml() {
  touch c-libyaml.yaml js-yaml.json c-libyaml.event
  run-all
  # TODO Populate tag words with heuristics.
  tml="\
=== <label goes here>
--- from: <Source URL or description>
--- tags: tag words

--- in-yaml(<)
$(cat input.yaml | reformat | tml | sed -e 's/^\(.\)/    \1/')
"
  libyaml=$(tml c-libyaml.event)
  if [[ $libyaml =~ (^|$'\n')[^\+\-\=] ]]; then
    tml+="
--- error
"
  else
    tml+="
--- out-yaml(<)
$(cat c-libyaml.yaml | tml | sed -e 's/^\(.\)/    \1/')

--- in-json
$(cat js-yaml.json | tml)

--- test-event
$(cat c-libyaml.event | tml)
"
  fi
}

get-views() {
  views=()
  default_views=false
  if [[ ${#view_spec[@]} -eq 0 ]]; then
    views=("${all_views[@]}")
    if ! $option_grid; then
      default_views=true
      return
    fi
  fi

  for view in "${view_spec[@]}"; do
    if [[ $view == / ]]; then
      views+=("$view")
    elif [[ $view =~ ^[0-9]+$ ]]; then
      if [[ $view -lt 1 || $view -gt ${#all_views[@]} ]]; then
        die "Invalid view number '$view'"
      fi
      views+=(${all_views[$((view - 1))]})
    elif [[ $view =~ ^/ ]]; then
      regex=${view#/}
      regex=${regex%/}
      for v in ${all_views[@]}; do
        if [[ $v =~ $regex ]]; then
          views+=($v)
        fi
      done
      [[ ${#views[@]} -gt 0 ]] ||
        die "No views match '$regex'"
    else
      check-view "$view"
      views+=("$view")
    fi
  done

  views2=()
  for view in "${views[@]}"; do
    [[ $view == / ]] || views2+=("$view")
  done
  total=${#views2[@]}
  [[ $total -gt 0 ]] || die "Invalid usage\n"

  $option_grid || return 0

  cols=(- 1 2 3 2 3 3 3 3 3 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6)
  col=${cols[$total]}
  n=0
  views=()
  for view in "${views2[@]}"; do
    if [[ $n -ge $col ]]; then
      views+=(/)
      n=0
    fi
    views+=("$view")
    : $((n++))
  done
}

check-view() {
  ok=false
  for v in ${all_views[@]}; do
    if [[ $v == "$view" ]]; then
      ok=true
      break
    fi
  done
  if ! $ok; then
    die "Invalid view '$view'. Try --list."
  fi
}

get-options() {
  GETOPT_ARGS='@arguments' \
  GETOPT_DEFAULT_HELP=false \
    getopt "$@"
  if [[ $arguments =~ ^RUN|SAVE|TESTML$ ]]; then
    command="$arguments"
  else
    view_spec=("${arguments[@]}")
  fi
  $option_debug && set -x
  $option_help && exit 0
  true
}

reformat() {
  perl -p0 \
    -e 's/<TAB>/\t/g;' \
    -e 's/([^\n])(\\|<NEL>)\n\z/$1/;' \
    -e ''
}

tml() {
  perl -p0 \
    -e 's/( +)$/"<SPC>" x length($1)/gem;' \
    -e 's/\t/<TAB>/g;' \
    -e 's/^([\ \t]+$|%|#)/\\$1/;' \
    -e 's/([^\n])\z/$1<NEL>\n/;' \
    -e ''
}

[[ $0 != "$BASH_SOURCE" ]] || main "$@"
